// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateUser struct {
	FirstName string  `json:"firstName"`
	LastName  *string `json:"lastName,omitempty"`
	Username  string  `json:"username"`
	Email     string  `json:"email"`
	Password  string  `json:"password"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewOutfit struct {
	Name        *string           `json:"name,omitempty"`
	Description *string           `json:"description,omitempty"`
	Pieces      []*NewOutfitPiece `json:"pieces"`
}

type NewOutfitPiece struct {
	VariantID string `json:"variantId"`
	Size      string `json:"size"`
}

type NewProduct struct {
	Name             string               `json:"name"`
	Description      *string              `json:"description,omitempty"`
	SourceURL        *string              `json:"sourceUrl,omitempty"`
	IsAvailableToBuy *bool                `json:"isAvailableToBuy,omitempty"`
	ProductGender    *ProductGender       `json:"productGender,omitempty"`
	Materials        []string             `json:"materials"`
	Variants         []*NewProductVariant `json:"variants"`
}

type NewProductVariant struct {
	Name    string   `json:"name"`
	Colors  []string `json:"colors"`
	Pattern *string  `json:"pattern,omitempty"`
}

type Outfit struct {
	ID          string         `json:"id"`
	Description *string        `json:"description,omitempty"`
	Likes       int            `json:"likes"`
	ImageUrls   []string       `json:"imageUrls"`
	Profile     *Profile       `json:"Profile"`
	Pieces      []*OutfitPiece `json:"pieces"`
}

type OutfitPiece struct {
	ID      string          `json:"id"`
	Size    *ProductSize    `json:"size"`
	Variant *ProductVariant `json:"variant"`
}

type Product struct {
	ID               string            `json:"id"`
	Name             string            `json:"name"`
	Description      *string           `json:"description,omitempty"`
	SourceURL        *string           `json:"sourceUrl,omitempty"`
	IsAvailableToBuy *bool             `json:"isAvailableToBuy,omitempty"`
	ProductGender    *ProductGender    `json:"productGender,omitempty"`
	Category         *ProductCategory  `json:"category,omitempty"`
	Materials        []string          `json:"materials"`
	Variants         []*ProductVariant `json:"variants"`
	SubmittedBy      *Profile          `json:"submittedBy"`
	OutfitsUsedIn    []*Outfit         `json:"outfitsUsedIn"`
}

type ProductFilter struct {
	IsAvailableToBuy *bool            `json:"isAvailableToBuy,omitempty"`
	ProductGender    *ProductGender   `json:"productGender,omitempty"`
	Category         *ProductCategory `json:"category,omitempty"`
	Materials        []string         `json:"materials"`
	Colors           []string         `json:"colors"`
	Pattern          *string          `json:"pattern,omitempty"`
}

type ProductSize struct {
	ShirtSize        *string `json:"shirtSize,omitempty"`
	BustInches       *int    `json:"bustInches,omitempty"`
	WaistInches      *int    `json:"waistInches,omitempty"`
	HipInches        *int    `json:"hipInches,omitempty"`
	PantLengthInches *int    `json:"pantLengthInches,omitempty"`
	ShoeSize         *int    `json:"shoeSize,omitempty"`
}

type ProductVariant struct {
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Colors    []string `json:"colors"`
	Pattern   *string  `json:"pattern,omitempty"`
	ImageUrls []string `json:"imageUrls"`
}

type Profile struct {
	ID                    string       `json:"id"`
	Username              string       `json:"username"`
	ImageURL              string       `json:"imageUrl"`
	Gender                *Gender      `json:"gender,omitempty"`
	HeightInches          *int         `json:"heightInches,omitempty"`
	WeightLbs             *int         `json:"weightLbs,omitempty"`
	SkinPigmentationValue *int         `json:"skinPigmentationValue,omitempty"`
	HairColor             *string      `json:"hairColor,omitempty"`
	EyeColor              *string      `json:"eyeColor,omitempty"`
	Sizes                 *ProductSize `json:"sizes,omitempty"`
	Following             []*Profile   `json:"following"`
	Followers             []*Profile   `json:"followers"`
	CreatedOutfits        []*Outfit    `json:"createdOutfits"`
	LikedOutfits          []*Outfit    `json:"likedOutfits"`
	ProductWishlist       []*Product   `json:"productWishlist"`
}

type ProfileFilter struct {
	Gender                *Gender `json:"gender,omitempty"`
	HeightInches          *int    `json:"heightInches,omitempty"`
	WeightLbs             *int    `json:"weightLbs,omitempty"`
	SkinPigmentationValue *int    `json:"skinPigmentationValue,omitempty"`
	HairColor             *string `json:"hairColor,omitempty"`
	EyeColor              *string `json:"eyeColor,omitempty"`
	ShirtSize             *string `json:"shirtSize,omitempty"`
	BustInches            *int    `json:"bustInches,omitempty"`
	WaistInches           *int    `json:"waistInches,omitempty"`
	HipInches             *int    `json:"hipInches,omitempty"`
	PantLengthInches      *int    `json:"pantLengthInches,omitempty"`
	ShoeSize              *int    `json:"shoeSize,omitempty"`
}

type User struct {
	ID        string   `json:"id"`
	FirstName string   `json:"firstName"`
	LastName  *string  `json:"lastName,omitempty"`
	Email     string   `json:"email"`
	Profile   *Profile `json:"Profile"`
}

type Gender string

const (
	GenderMan       Gender = "MAN"
	GenderWoman     Gender = "WOMAN"
	GenderNonbinary Gender = "NONBINARY"
)

var AllGender = []Gender{
	GenderMan,
	GenderWoman,
	GenderNonbinary,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMan, GenderWoman, GenderNonbinary:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductCategory string

const (
	ProductCategoryHeadwear    ProductCategory = "HEADWEAR"
	ProductCategoryEyewear     ProductCategory = "EYEWEAR"
	ProductCategoryTops        ProductCategory = "TOPS"
	ProductCategoryBottoms     ProductCategory = "BOTTOMS"
	ProductCategoryDresses     ProductCategory = "DRESSES"
	ProductCategoryOuterwear   ProductCategory = "OUTERWEAR"
	ProductCategoryAccessories ProductCategory = "ACCESSORIES"
	ProductCategoryShoes       ProductCategory = "SHOES"
	ProductCategorySwimwear    ProductCategory = "SWIMWEAR"
	ProductCategoryPiercings   ProductCategory = "PIERCINGS"
	ProductCategoryNecklaces   ProductCategory = "NECKLACES"
	ProductCategoryRings       ProductCategory = "RINGS"
)

var AllProductCategory = []ProductCategory{
	ProductCategoryHeadwear,
	ProductCategoryEyewear,
	ProductCategoryTops,
	ProductCategoryBottoms,
	ProductCategoryDresses,
	ProductCategoryOuterwear,
	ProductCategoryAccessories,
	ProductCategoryShoes,
	ProductCategorySwimwear,
	ProductCategoryPiercings,
	ProductCategoryNecklaces,
	ProductCategoryRings,
}

func (e ProductCategory) IsValid() bool {
	switch e {
	case ProductCategoryHeadwear, ProductCategoryEyewear, ProductCategoryTops, ProductCategoryBottoms, ProductCategoryDresses, ProductCategoryOuterwear, ProductCategoryAccessories, ProductCategoryShoes, ProductCategorySwimwear, ProductCategoryPiercings, ProductCategoryNecklaces, ProductCategoryRings:
		return true
	}
	return false
}

func (e ProductCategory) String() string {
	return string(e)
}

func (e *ProductCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductCategory", str)
	}
	return nil
}

func (e ProductCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductGender string

const (
	ProductGenderMale   ProductGender = "MALE"
	ProductGenderFemale ProductGender = "FEMALE"
	ProductGenderUnisex ProductGender = "UNISEX"
)

var AllProductGender = []ProductGender{
	ProductGenderMale,
	ProductGenderFemale,
	ProductGenderUnisex,
}

func (e ProductGender) IsValid() bool {
	switch e {
	case ProductGenderMale, ProductGenderFemale, ProductGenderUnisex:
		return true
	}
	return false
}

func (e ProductGender) String() string {
	return string(e)
}

func (e *ProductGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductGender", str)
	}
	return nil
}

func (e ProductGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

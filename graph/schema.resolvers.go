package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/andersjbe/quin/graph/model"
)

// Pieces is the resolver for the pieces field.
func (r *outfitResolver) Pieces(ctx context.Context, obj *model.Outfit) ([]*model.OutfitPiece, error) {
	result := make([]*model.OutfitPiece, 6)

	pieces, err := r.DB.GetPiecesByOutfitId(ctx, obj.ID)
	if err != nil {
		return result, err
	}

	for _, piece := range pieces {
		var productSize model.ProductSize
		err := json.Unmarshal(piece.Sizes, &productSize)
		if err != nil {
			return result, err
		}

		var colors []string
		err = json.Unmarshal(piece.Colors, &colors)
		if err != nil {
			return result, err
		}

		result = append(result, &model.OutfitPiece{
			ID: piece.PieceUuid,
			Size: &productSize,
			Variant: &model.ProductVariant{
				ID: piece.VariantUuid,
				Name: piece.Name,
				Colors: colors,
				Pattern: &piece.Pattern,
			},
		})
	}

	return result, nil
}

// SubmittedBy is the resolver for the submittedBy field.
func (r *productResolver) SubmittedBy(ctx context.Context, obj *model.Product) (*model.Profile, error) {
	panic(fmt.Errorf("not implemented: SubmittedBy - submittedBy"))
}

// OutfitsUsedIn is the resolver for the outfitsUsedIn field.
func (r *productResolver) OutfitsUsedIn(ctx context.Context, obj *model.Product) ([]*model.Outfit, error) {
	panic(fmt.Errorf("not implemented: OutfitsUsedIn - outfitsUsedIn"))
}

// Following is the resolver for the following field.
func (r *profileResolver) Following(ctx context.Context, obj *model.Profile) ([]*model.Profile, error) {
	panic(fmt.Errorf("not implemented: Following - following"))
}

// Followers is the resolver for the followers field.
func (r *profileResolver) Followers(ctx context.Context, obj *model.Profile) ([]*model.Profile, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// CreatedOutfits is the resolver for the createdOutfits field.
func (r *profileResolver) CreatedOutfits(ctx context.Context, obj *model.Profile) ([]*model.Outfit, error) {
	panic(fmt.Errorf("not implemented: CreatedOutfits - createdOutfits"))
}

// LikedOutfits is the resolver for the likedOutfits field.
func (r *profileResolver) LikedOutfits(ctx context.Context, obj *model.Profile) ([]*model.Outfit, error) {
	panic(fmt.Errorf("not implemented: LikedOutfits - likedOutfits"))
}

// Outfit returns OutfitResolver implementation.
func (r *Resolver) Outfit() OutfitResolver { return &outfitResolver{r} }

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

// Profile returns ProfileResolver implementation.
func (r *Resolver) Profile() ProfileResolver { return &profileResolver{r} }

type outfitResolver struct{ *Resolver }
type productResolver struct{ *Resolver }
type profileResolver struct{ *Resolver }

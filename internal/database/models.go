// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package database

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

type ProductsCategories string

const (
	ProductsCategoriesHeadwear    ProductsCategories = "headwear"
	ProductsCategoriesEyewear     ProductsCategories = "eyewear"
	ProductsCategoriesTops        ProductsCategories = "tops"
	ProductsCategoriesBottoms     ProductsCategories = "bottoms"
	ProductsCategoriesDresses     ProductsCategories = "dresses"
	ProductsCategoriesOuterwear   ProductsCategories = "outerwear"
	ProductsCategoriesAccessories ProductsCategories = "accessories"
	ProductsCategoriesShoes       ProductsCategories = "shoes"
	ProductsCategoriesSwimwear    ProductsCategories = "swimwear"
	ProductsCategoriesPiercings   ProductsCategories = "piercings"
	ProductsCategoriesNecklaces   ProductsCategories = "necklaces"
	ProductsCategoriesRings       ProductsCategories = "rings"
)

func (e *ProductsCategories) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductsCategories(s)
	case string:
		*e = ProductsCategories(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductsCategories: %T", src)
	}
	return nil
}

type NullProductsCategories struct {
	ProductsCategories ProductsCategories
	Valid              bool // Valid is true if ProductsCategories is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductsCategories) Scan(value interface{}) error {
	if value == nil {
		ns.ProductsCategories, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductsCategories.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductsCategories) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductsCategories), nil
}

type ProductsGender string

const (
	ProductsGenderMale   ProductsGender = "male"
	ProductsGenderFemale ProductsGender = "female"
	ProductsGenderUnisex ProductsGender = "unisex"
)

func (e *ProductsGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductsGender(s)
	case string:
		*e = ProductsGender(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductsGender: %T", src)
	}
	return nil
}

type NullProductsGender struct {
	ProductsGender ProductsGender
	Valid          bool // Valid is true if ProductsGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductsGender) Scan(value interface{}) error {
	if value == nil {
		ns.ProductsGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductsGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductsGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductsGender), nil
}

type ProfilesGender string

const (
	ProfilesGenderMan       ProfilesGender = "man"
	ProfilesGenderWoman     ProfilesGender = "woman"
	ProfilesGenderNonbinary ProfilesGender = "nonbinary"
)

func (e *ProfilesGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProfilesGender(s)
	case string:
		*e = ProfilesGender(s)
	default:
		return fmt.Errorf("unsupported scan type for ProfilesGender: %T", src)
	}
	return nil
}

type NullProfilesGender struct {
	ProfilesGender ProfilesGender
	Valid          bool // Valid is true if ProfilesGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProfilesGender) Scan(value interface{}) error {
	if value == nil {
		ns.ProfilesGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProfilesGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProfilesGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProfilesGender), nil
}

type Outfit struct {
	ID          []byte
	CreatedAt   sql.NullTime
	Description sql.NullString
	ImageUrls   json.RawMessage
	ProfileID   []byte
}

type OutfitLike struct {
	CreatedAt sql.NullTime
	OutfitID  []byte
	ProfileID []byte
}

type OutfitPiece struct {
	CreatedAt sql.NullTime
	Sizes     json.RawMessage
	OutfitID  []byte
	VariantID []byte
}

type Product struct {
	ID             []byte
	CreatedAt      sql.NullTime
	Name           string
	Description    sql.NullString
	Sourceurl      sql.NullString
	AvailableToBuy bool
	Gender         NullProductsGender
	Categories     NullProductsCategories
	Materials      json.RawMessage
	ImageUrl       string
	ProfileID      []byte
}

type ProductSafe struct {
	CreatedAt sql.NullTime
	ProductID []byte
	ProfileID []byte
}

type ProductVariant struct {
	ID        []byte
	CreatedAt sql.NullTime
	Name      string
	Colors    json.RawMessage
	Pattern   string
	ImageUrls json.RawMessage
	ProductID []byte
}

type Profile struct {
	ID               []byte
	CreatedAt        sql.NullTime
	Username         string
	ImageUrl         string
	Gender           NullProfilesGender
	HeightInches     sql.NullInt32
	WeightLbs        sql.NullInt32
	SkinPigmentation sql.NullInt32
	HairColor        sql.NullString
	EyeColor         sql.NullString
	SizePreferences  json.RawMessage
	UserID           []byte
}

type ProfileFollow struct {
	CreatedAt   sql.NullTime
	FollowerID  []byte
	FollowingID []byte
}

type User struct {
	ID        []byte
	CreatedAt sql.NullTime
	FirstName string
	LastName  string
	Email     string
	Password  string
}

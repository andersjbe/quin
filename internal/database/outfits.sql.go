// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: outfits.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const getPiecesByOutfitId = `-- name: GetPiecesByOutfitId :many
SELECT p.created_at, p.sizes, p.outfit_id, p.variant_id, p.key, v.id, v.created_at, v.name, v.colors, v.pattern, v.image_urls, v.product_id
FROM outfit_pieces p
JOIN product_variants v ON p.variant_id=v.id
WHERE p.outfit_id=$1
ORDER BY p.created_at DESC
`

type GetPiecesByOutfitIdRow struct {
	CreatedAt   sql.NullTime
	Sizes       json.RawMessage
	OutfitID    uuid.UUID
	VariantID   uuid.UUID
	Key         interface{}
	ID          uuid.UUID
	CreatedAt_2 sql.NullTime
	Name        string
	Colors      json.RawMessage
	Pattern     string
	ImageUrls   pqtype.NullRawMessage
	ProductID   uuid.UUID
}

func (q *Queries) GetPiecesByOutfitId(ctx context.Context, outfitID uuid.UUID) ([]GetPiecesByOutfitIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPiecesByOutfitId, outfitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPiecesByOutfitIdRow
	for rows.Next() {
		var i GetPiecesByOutfitIdRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Sizes,
			&i.OutfitID,
			&i.VariantID,
			&i.Key,
			&i.ID,
			&i.CreatedAt_2,
			&i.Name,
			&i.Colors,
			&i.Pattern,
			&i.ImageUrls,
			&i.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createProduct = `-- name: createProduct :exec
INSERT INTO products (name, description, sourceUrl, available_to_buy, gender, categories, materials, image_url, profile_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type createProductParams struct {
	Name           string
	Description    sql.NullString
	Sourceurl      sql.NullString
	AvailableToBuy bool
	Gender         NullProductGender
	Categories     NullProductCategory
	Materials      json.RawMessage
	ImageUrl       string
	ProfileID      uuid.UUID
}

func (q *Queries) createProduct(ctx context.Context, arg createProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Sourceurl,
		arg.AvailableToBuy,
		arg.Gender,
		arg.Categories,
		arg.Materials,
		arg.ImageUrl,
		arg.ProfileID,
	)
	return err
}

const getProductById = `-- name: getProductById :one
SELECT id, created_at, name, description, sourceurl, available_to_buy, gender, categories, materials, image_url, profile_id FROM products
WHERE id = UUID_TO_BIN($1)
LIMIT 1
`

func (q *Queries) getProductById(ctx context.Context, productid interface{}) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, productid)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Sourceurl,
		&i.AvailableToBuy,
		&i.Gender,
		&i.Categories,
		&i.Materials,
		&i.ImageUrl,
		&i.ProfileID,
	)
	return i, err
}

const updateProductById = `-- name: updateProductById :exec
UPDATE products
SET name=COALESCE($5, name),
   description=COALESCE($1,description),
   sourceUrl=COALESCE($2, sourceUrl),
   available_to_buy=COALESCE($6, available_to_buy),
   gender=COALESCE($3, gender),
   categories=COALESCE($4, categories),
   materials=COALESCE($7, materials),
   image_url=COALESCE($8, image_url)
WHERE id = $9::UUID
`

type updateProductByIdParams struct {
	Description    sql.NullString
	Sourceurl      sql.NullString
	Gender         NullProductGender
	Categories     NullProductCategory
	Name           sql.NullString
	AvailableToBuy sql.NullBool
	Materials      pqtype.NullRawMessage
	ImageUrl       sql.NullString
	ID             uuid.UUID
}

func (q *Queries) updateProductById(ctx context.Context, arg updateProductByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateProductById,
		arg.Description,
		arg.Sourceurl,
		arg.Gender,
		arg.Categories,
		arg.Name,
		arg.AvailableToBuy,
		arg.Materials,
		arg.ImageUrl,
		arg.ID,
	)
	return err
}

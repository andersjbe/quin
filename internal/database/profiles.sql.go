// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: profiles.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createProfile = `-- name: CreateProfile :execlastid
INSERT INTO profiles (username, image_url, user_id)
VALUES ($1, "https://cdn.onlinewebfonts.com/svg/img_110805.png", $2)
`

type CreateProfileParams struct {
	Username string
	UserID   uuid.UUID
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createProfile, arg.Username, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createProfileFollow = `-- name: CreateProfileFollow :exec
INSERT INTO profile_follows(follower_id, following_id)
VALUES($1, $2)
`

type CreateProfileFollowParams struct {
	FollowerID  uuid.UUID
	FollowingID uuid.UUID
}

func (q *Queries) CreateProfileFollow(ctx context.Context, arg CreateProfileFollowParams) error {
	_, err := q.db.ExecContext(ctx, createProfileFollow, arg.FollowerID, arg.FollowingID)
	return err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles WHERE id=$1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const deleteProfileFollow = `-- name: DeleteProfileFollow :exec
DELETE FROM profile_follows
WHERE follower_id=@follower_id AND following_id=@following_id
`

func (q *Queries) DeleteProfileFollow(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteProfileFollow)
	return err
}

const getFollowerProfiles = `-- name: GetFollowerProfiles :many
SELECT p.id, p.created_at, p.username, p.image_url, p.gender, p.height_inches, p.weight_lbs, p.skin_pigmentation, p.hair_color, p.eye_color, p.size_preferences, p.user_id
FROM profiles p
JOIN profile_follows f ON p.id=f.following_id
WHERE f.following_id=$1
ORDER BY f.created_at DESC
`

func (q *Queries) GetFollowerProfiles(ctx context.Context, followingID uuid.UUID) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getFollowerProfiles, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Username,
			&i.ImageUrl,
			&i.Gender,
			&i.HeightInches,
			&i.WeightLbs,
			&i.SkinPigmentation,
			&i.HairColor,
			&i.EyeColor,
			&i.SizePreferences,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingProfiles = `-- name: GetFollowingProfiles :many
SELECT p.id, p.created_at, p.username, p.image_url, p.gender, p.height_inches, p.weight_lbs, p.skin_pigmentation, p.hair_color, p.eye_color, p.size_preferences, p.user_id
FROM profiles p
JOIN profile_follows f ON p.id=f.follower_id
WHERE f.follower_id=$1
ORDER BY f.created_at DESC
`

func (q *Queries) GetFollowingProfiles(ctx context.Context, followerID uuid.UUID) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingProfiles, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Username,
			&i.ImageUrl,
			&i.Gender,
			&i.HeightInches,
			&i.WeightLbs,
			&i.SkinPigmentation,
			&i.HairColor,
			&i.EyeColor,
			&i.SizePreferences,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT u.id, u.first_name, u.last_name, p.id, p.created_at, p.username, p.image_url, p.gender, p.height_inches, p.weight_lbs, p.skin_pigmentation, p.hair_color, p.eye_color, p.size_preferences, p.user_id
FROM profiles p
JOIN users u ON p.user_id=u.id
WHERE p.id = $1
LIMIT 1
`

type GetProfileByIDRow struct {
	ID               uuid.UUID
	FirstName        string
	LastName         string
	ID_2             uuid.UUID
	CreatedAt        sql.NullTime
	Username         string
	ImageUrl         string
	Gender           NullProfileGender
	HeightInches     sql.NullInt32
	WeightLbs        sql.NullInt32
	SkinPigmentation sql.NullInt32
	HairColor        sql.NullString
	EyeColor         sql.NullString
	SizePreferences  pqtype.NullRawMessage
	UserID           uuid.UUID
}

func (q *Queries) GetProfileByID(ctx context.Context, id uuid.UUID) (GetProfileByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByID, id)
	var i GetProfileByIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ID_2,
		&i.CreatedAt,
		&i.Username,
		&i.ImageUrl,
		&i.Gender,
		&i.HeightInches,
		&i.WeightLbs,
		&i.SkinPigmentation,
		&i.HairColor,
		&i.EyeColor,
		&i.SizePreferences,
		&i.UserID,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT u.id, u.first_name, u.last_name, p.id, p.created_at, p.username, p.image_url, p.gender, p.height_inches, p.weight_lbs, p.skin_pigmentation, p.hair_color, p.eye_color, p.size_preferences, p.user_id
FROM profiles p
JOIN users u ON p.user_id=u.id
WHERE p.user_id = $1
LIMIT 1
`

type GetProfileByUserIDRow struct {
	ID               uuid.UUID
	FirstName        string
	LastName         string
	ID_2             uuid.UUID
	CreatedAt        sql.NullTime
	Username         string
	ImageUrl         string
	Gender           NullProfileGender
	HeightInches     sql.NullInt32
	WeightLbs        sql.NullInt32
	SkinPigmentation sql.NullInt32
	HairColor        sql.NullString
	EyeColor         sql.NullString
	SizePreferences  pqtype.NullRawMessage
	UserID           uuid.UUID
}

func (q *Queries) GetProfileByUserID(ctx context.Context, userID uuid.UUID) (GetProfileByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUserID, userID)
	var i GetProfileByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ID_2,
		&i.CreatedAt,
		&i.Username,
		&i.ImageUrl,
		&i.Gender,
		&i.HeightInches,
		&i.WeightLbs,
		&i.SkinPigmentation,
		&i.HairColor,
		&i.EyeColor,
		&i.SizePreferences,
		&i.UserID,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profiles
SET
  image_url=coalesce($1, image_url),
  gender=coalesce($2, gender),
  height_inches=coalesce($3, height_inches),
  weight_lbs=coalesce($4, weight_lbs),
  skin_pigmentation=coalesce($5, skin_pigmentation),
  hair_color=coalesce($6, hair_color),
  eye_color=coalesce($7, eye_color),
  size_preferences=coalesce($8, size_preferences)
WHERE user_id = $9::UUID
`

type UpdateProfileParams struct {
	ImageUrl         sql.NullString
	Gender           NullProfileGender
	HeightInches     sql.NullInt32
	WeightLbs        sql.NullInt32
	SkinPigmentation sql.NullInt32
	HairColor        sql.NullString
	EyeColor         sql.NullString
	SizePreferences  pqtype.NullRawMessage
	UserId           uuid.UUID
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile,
		arg.ImageUrl,
		arg.Gender,
		arg.HeightInches,
		arg.WeightLbs,
		arg.SkinPigmentation,
		arg.HairColor,
		arg.EyeColor,
		arg.SizePreferences,
		arg.UserId,
	)
	return err
}

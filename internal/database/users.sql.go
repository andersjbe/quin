// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (id, first_name, last_name, email, password)
VALUES (UUID_TO_BIN(UUID(), 1), ?, ?, ?, ?)
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id []byte) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT BIN_TO_UUID(id, 1) AS uuid, id, created_at, first_name, last_name, email, password FROM users
WHERE email = ?
LIMIT 1
`

type GetUserByEmailRow struct {
	Uuid      string
	ID        []byte
	CreatedAt sql.NullTime
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT BIN_TO_UUID(id, 1) AS uuid, id, created_at, first_name, last_name, email, password FROM users
WHERE id = UUID_TO_BIN(?, 1)
LIMIT 1
`

type GetUserByIDRow struct {
	Uuid      string
	ID        []byte
	CreatedAt sql.NullTime
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) GetUserByID(ctx context.Context, uuidTOBIN string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, uuidTOBIN)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  first_name=coalesce(?, first_name),
  last_name=coalesce(?, last_name),
  email=coalesce(?, email),
  password=coalesce(?, password)
WHERE id = UUID_TO_BIN(?)
`

type UpdateUserParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	Email     sql.NullString
	Password  sql.NullString
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
